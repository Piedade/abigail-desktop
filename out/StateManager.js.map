{"version":3,"file":"StateManager.js","sourceRoot":"","sources":["../src/StateManager.ts"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,yBAAwB;AACxB,6BAA4B;AAC5B,2CAA2C;AAC3C,iCAA8B;AAEjB,QAAA,WAAW,GAAG,+BAA+B,CAAA;AAE1D;IACE,MAAM,CAAC;QACL,EAAC,GAAG,EAAE,mBAAW,EAAC;KACnB,CAAA;AACH,CAAC;AAED;IAKE;QAJQ,UAAK,GAAG,IAAI,WAAW,CAAC,oBAAoB,EAAE,EAAC,OAAO,EAAE,cAAc,EAAE,EAAC,CAAC,CAAA;QAKhF,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,qBAAqB,GAAG,CAAC,YAAK,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC,CAAA;QAChI,CAAC;IACH,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;QAC/B,IAAI,CAAC,OAAO,GAAG,cAAc,EAAE,CAAA;QAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAA;IACvB,CAAC;IAEO,aAAa;QACnB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;QACpB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACjB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAA;YACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAClB,CAAC;QACD,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAED,UAAU;QACR,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,OAAO,CAAA;IACrC,CAAC;IAED,IAAI;QACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;QACtB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAA;QACvB,CAAC;IACH,CAAC;CACF;AApCD,oCAoCC","sourcesContent":["\"use strict\"\n\nimport * as os from \"os\"\nimport * as path from \"path\"\nimport ConfigStore = require(\"configstore\")\nimport { isDev } from \"./util\"\n\nexport const DEFAULT_URL = \"http://admin.worldfatima.com/\"\n\nfunction defaultWindows() {\n  return [\n    {url: DEFAULT_URL}\n  ]\n}\n\nexport class StateManager {\n  private store = new ConfigStore(\"onshape-unofficial\", {windows: defaultWindows()})\n\n  private data: Config\n\n  constructor() {\n    if (os.platform() == \"darwin\") {\n      this.store.path = path.join(os.homedir(), \"Library\", \"Preferences\", \"com.imagine.abigail\" + (isDev() ? \"-dev\" : \"\") + \".json\")\n    }\n  }\n\n  restoreWindows(): void {\n    let data = this.getOrLoadData()\n    data.windows = defaultWindows()\n    this.store.all = data\n  }\n\n  private getOrLoadData(): Config {\n    let data = this.data\n    if (data == null) {\n      data = this.store.all\n      this.data = data\n    }\n    return data\n  }\n\n  getWindows(): Array<WindowItem> {\n    return this.getOrLoadData().windows\n  }\n\n  save(): void {\n    const data = this.data\n    if (data != null) {\n      this.store.all = data\n    }\n  }\n}\n\ninterface Config {\n  windows: Array<WindowItem>\n}\n\nexport interface WindowItem {\n  url: string\n  width?: number\n  height?: number\n  x?: number\n  y?: number\n  maximized?: boolean\n}\n"]}