{"version":3,"file":"electronEventSignals.js","sourceRoot":"","sources":["../src/electronEventSignals.ts"],"names":[],"mappings":";AAGA,uCAA6B;AAU7B,mBAAmB,CAAS;IAC1B,MAAM,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAA;AACtD,CAAC;AAED,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;AAEpD,oBAAoB,OAAqB,EAAE,KAAa,EAAE,OAAiB;IACzE,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACf,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,UAAU,GAAG,IAAW;YACxC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;YACjC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,IAAI,CAAC,CAAC;QACJ,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;IAC5B,CAAC;AACH,CAAC;AAED;IACE,YAAoB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IACxC,CAAC;IAED,SAAS,CAAC,OAAuD;QAC/D,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAA;QACjD,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAED,eAAe,CAAC,OAAuD;QACrE,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAA;QACzD,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAED,WAAW,CAAC,OAAmD;QAC7D,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,uBAAuB,EAAE,OAAO,CAAC,CAAA;QAC1D,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;CACF;AAlBD,8CAkBC;AAED;IAAA;QACU,YAAO,GAAG,cAAG,CAAA;IAWvB,CAAC;IATC,aAAa,CAAC,OAAoD;QAChE,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,qBAAqB,EAAE,OAAO,CAAC,CAAA;QACxD,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAED,aAAa,CAAC,OAAoD;QAChE,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAA;QACzD,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;CACF;AAZD,8BAYC","sourcesContent":["import WebContents = Electron.WebContents\nimport BrowserWindow = Electron.BrowserWindow\nimport EventEmitter = NodeJS.EventEmitter;\nimport {app} from \"electron\";\n\nexport interface WindowEvent {\n  sender: BrowserWindow\n}\n\nexport interface WebContentsEvent {\n  sender: WebContents\n}\n\nfunction isEnvTrue(v: string): boolean {\n  return v != null && (v.length === 0 || v === \"true\")\n}\n\nconst isLogEvent = isEnvTrue(process.env.LOG_EVENTS)\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: Function) {\n  if (isLogEvent) {\n    emitter.on(event, function (...args: any[]) {\n      console.log(\"%s %s\", event, args)\n      handler.apply(this, args)\n    })\n  }\n  else {\n    emitter.on(event, handler)\n  }\n}\n\nexport class WebContentsSignal {\n  constructor(private emitter: WebContents) {\n  }\n\n  navigated(handler: (event: WebContentsEvent, url: string) => void): WebContentsSignal {\n    addHandler(this.emitter, \"did-navigate\", handler)\n    return this\n  }\n\n  navigatedInPage(handler: (event: WebContentsEvent, url: string) => void): WebContentsSignal {\n    addHandler(this.emitter, \"did-navigate-in-page\", handler)\n    return this\n  }\n\n  frameLoaded(handler: (event: any, isMainFrame: boolean) => void): WebContentsSignal {\n    addHandler(this.emitter, \"did-frame-finish-load\", handler)\n    return this\n  }\n}\n\nexport class AppSignal {\n  private emitter = app\n\n  windowBlurred(handler: (event: any, window: BrowserWindow) => void): AppSignal {\n    addHandler(this.emitter, \"browser-window-blur\", handler)\n    return this\n  }\n\n  windowFocused(handler: (event: any, window: BrowserWindow) => void): AppSignal {\n    addHandler(this.emitter, \"browser-window-focus\", handler)\n    return this\n  }\n}"]}